support:
https://formation.webdevpro.net/git/
login : git
password : git

créer 2 dossiers

1.assets => css / javascript/ images
2.documentation => note de cours

créer un fichier à la racine du projet qui s'appelle index.html

=> git pour pouvoir versionner (suivre les versions / les évolutions de notre projet en HTML / CSS /JS)

------------

commande qui permet de créer un dépôt / repository
dossier local qui va contenir toutes les évolutions de notre projet
Attention il faut saisir cette commande en choisissant le PATH de la racine du projet que l'on veut suivre

git init

Initialized empty Git repository in C:/Users/stagiaire/Desktop/git/.git/ en cas de succès

dossier .git (caché par défaut) 
stocker les différentes versions de votre projet
on ne manipule pas le contenu de ce dossier !!

git config --global user.name "..."
git config --global user.email "...@..."
git config -l

=> modifier le fichier index.html ! enter

 lancer le versionning => suivre l'avancer de tous les fichiers dans le dossier git

 git status

 On branch master => vous êtes sur la branche master

No commits yet => pour l'instant il n'ya pas d'enregistrement commité dans le dossier .git

Untracked files: => fichier non suivi
  (use "git add <file>..." to include in what will be committed)
  conseil => si tu veux suivre des fichiers => proposition git add <file>
        documentations/
        index.html

nothing added to commit but untracked files present (use "git add" to track)

------------------

git add index.html

------------------

git status

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        documentations/

------------------

git commit -m "creation page index.html"

[master (root-commit) 1593545] creation page index.html
 1 file changed, 12 insertions(+) 1 fichier qui a stocké dans le .git
 create mode 100644 index.html

 chmod 000000

 ------------------

cls/clear => nettoyer le terminal

git status

différence entre le fichier index.html (.git) et le fichier index.html (dans le projet)

On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)

  git add index.html

  git commit -m "ajouter h1 + form"

  [master 8786a3a] ajouter h1 + form
 1 file changed, 6 insertions(+), 1 deletion(-)

 -------------------

 créer un fichier style.css
 modifier le fichier index.html

 git add index.html assets/style.css

 git commit -m "ajout du fichier style.css"

 -------------------
commande qui permet de 
git add <fichier>
git commit -m "message"

git commit -a -m "message"
git commit -am "message"

que sur les fichiers trackés

---------------------

git add fichier1 fichier2
 
git add*.css
git add*.(css|php|js)

git add --all 
git add --A
git add *

---------------------

gitk => outil visuel qui permet d'avoir les différents commit réalisés

git log

Author: Anthony G <anthonygogomis@gmail.com>
Date:   Thu Oct 20 11:21:21 2022 +0200

    ajout du fichier style.css



git log --oneline

619946f (HEAD -> master) formulaire
40c5d20 ajout du fichier style.css
7478354 ajout du fichier style.css
ff31c4a ajout du fichier style.css
94742a6 ajout du fichier style.css
0da127f ajout du fichier style.css
8786a3a ajouter h1 + form
1593545 creation page index.html



git log --oneline -p <fichier> pour plus de précision

619946f (HEAD -> master) formulaire
diff --git a/assets/style.css b/assets/style.css
index 008cf18..f72f104 100644
--- a/assets/style.css
+++ b/assets/style.css
@@ -1,7 +1,7 @@
 .container{
     font-family: sans-serif;
     width: 100%;
-    max-width: 1200px;
+    max-width: 600px;
     margin: 0 auto;
     padding: 0 20px;
     box-sizing: border-box;
@@ -9,13 +9,24 @@
     background-color: blanchedalmond;
 }

-.input{
+.input,textarea{
     font-family: sans-serif;
-    width: 20%;
-    max-width: 1200px;
-    margin: 0 auto;
-    padding: 0 60px;
:

---------------------

Revenir en arrière

git checkout ==> si on a pas fait de commit ==> effaccer les lignes qui ne sont pas dns le depository pour revenir dans l'état du commit précédent
git revert numero ==> après avoir effectuer un commit => revenir sur un ancien commit effectué
git reset numéro de commit --hard ==> supprimer plein de commit et revenir au commit voulu

---------------------

monde parallèle à la branch principale
vérifier que la branche est bien nettoyer

git status
git add --all
git commit -m "fin"
git status

git branch mise-en-forme => on peut donner le nom qu'on veut à la branche
git branch ==> liste des branches
git checkout mise-en-forme ==> se positionner sur la branche

git checkout master
git merge mise-en-forme